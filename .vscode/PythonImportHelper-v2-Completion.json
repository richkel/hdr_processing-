[
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "BaseInvocation",
        "importPath": "invokeai.app.invocations.baseinvocation",
        "description": "invokeai.app.invocations.baseinvocation",
        "isExtraImport": true,
        "detail": "invokeai.app.invocations.baseinvocation",
        "documentation": {}
    },
    {
        "label": "InputField",
        "importPath": "invokeai.app.invocations.baseinvocation",
        "description": "invokeai.app.invocations.baseinvocation",
        "isExtraImport": true,
        "detail": "invokeai.app.invocations.baseinvocation",
        "documentation": {}
    },
    {
        "label": "OutputField",
        "importPath": "invokeai.app.invocations.baseinvocation",
        "description": "invokeai.app.invocations.baseinvocation",
        "isExtraImport": true,
        "detail": "invokeai.app.invocations.baseinvocation",
        "documentation": {}
    },
    {
        "label": "InvocationContext",
        "importPath": "invokeai.app.invocations.baseinvocation",
        "description": "invokeai.app.invocations.baseinvocation",
        "isExtraImport": true,
        "detail": "invokeai.app.invocations.baseinvocation",
        "documentation": {}
    },
    {
        "label": "invocation",
        "importPath": "invokeai.app.invocations.baseinvocation",
        "description": "invokeai.app.invocations.baseinvocation",
        "isExtraImport": true,
        "detail": "invokeai.app.invocations.baseinvocation",
        "documentation": {}
    },
    {
        "label": "BaseInvocation",
        "importPath": "invokeai.app.invocations.baseinvocation",
        "description": "invokeai.app.invocations.baseinvocation",
        "isExtraImport": true,
        "detail": "invokeai.app.invocations.baseinvocation",
        "documentation": {}
    },
    {
        "label": "InputField",
        "importPath": "invokeai.app.invocations.baseinvocation",
        "description": "invokeai.app.invocations.baseinvocation",
        "isExtraImport": true,
        "detail": "invokeai.app.invocations.baseinvocation",
        "documentation": {}
    },
    {
        "label": "OutputField",
        "importPath": "invokeai.app.invocations.baseinvocation",
        "description": "invokeai.app.invocations.baseinvocation",
        "isExtraImport": true,
        "detail": "invokeai.app.invocations.baseinvocation",
        "documentation": {}
    },
    {
        "label": "InvocationContext",
        "importPath": "invokeai.app.invocations.baseinvocation",
        "description": "invokeai.app.invocations.baseinvocation",
        "isExtraImport": true,
        "detail": "invokeai.app.invocations.baseinvocation",
        "documentation": {}
    },
    {
        "label": "invocation",
        "importPath": "invokeai.app.invocations.baseinvocation",
        "description": "invokeai.app.invocations.baseinvocation",
        "isExtraImport": true,
        "detail": "invokeai.app.invocations.baseinvocation",
        "documentation": {}
    },
    {
        "label": "BaseInvocation",
        "importPath": "invokeai.app.invocations.baseinvocation",
        "description": "invokeai.app.invocations.baseinvocation",
        "isExtraImport": true,
        "detail": "invokeai.app.invocations.baseinvocation",
        "documentation": {}
    },
    {
        "label": "InputField",
        "importPath": "invokeai.app.invocations.baseinvocation",
        "description": "invokeai.app.invocations.baseinvocation",
        "isExtraImport": true,
        "detail": "invokeai.app.invocations.baseinvocation",
        "documentation": {}
    },
    {
        "label": "OutputField",
        "importPath": "invokeai.app.invocations.baseinvocation",
        "description": "invokeai.app.invocations.baseinvocation",
        "isExtraImport": true,
        "detail": "invokeai.app.invocations.baseinvocation",
        "documentation": {}
    },
    {
        "label": "InvocationContext",
        "importPath": "invokeai.app.invocations.baseinvocation",
        "description": "invokeai.app.invocations.baseinvocation",
        "isExtraImport": true,
        "detail": "invokeai.app.invocations.baseinvocation",
        "documentation": {}
    },
    {
        "label": "invocation",
        "importPath": "invokeai.app.invocations.baseinvocation",
        "description": "invokeai.app.invocations.baseinvocation",
        "isExtraImport": true,
        "detail": "invokeai.app.invocations.baseinvocation",
        "documentation": {}
    },
    {
        "label": "BaseInvocation",
        "importPath": "invokeai.app.invocations.baseinvocation",
        "description": "invokeai.app.invocations.baseinvocation",
        "isExtraImport": true,
        "detail": "invokeai.app.invocations.baseinvocation",
        "documentation": {}
    },
    {
        "label": "InputField",
        "importPath": "invokeai.app.invocations.baseinvocation",
        "description": "invokeai.app.invocations.baseinvocation",
        "isExtraImport": true,
        "detail": "invokeai.app.invocations.baseinvocation",
        "documentation": {}
    },
    {
        "label": "InvocationContext",
        "importPath": "invokeai.app.invocations.baseinvocation",
        "description": "invokeai.app.invocations.baseinvocation",
        "isExtraImport": true,
        "detail": "invokeai.app.invocations.baseinvocation",
        "documentation": {}
    },
    {
        "label": "invocation",
        "importPath": "invokeai.app.invocations.baseinvocation",
        "description": "invokeai.app.invocations.baseinvocation",
        "isExtraImport": true,
        "detail": "invokeai.app.invocations.baseinvocation",
        "documentation": {}
    },
    {
        "label": "ImageField",
        "importPath": "invokeai.app.invocations.primitives",
        "description": "invokeai.app.invocations.primitives",
        "isExtraImport": true,
        "detail": "invokeai.app.invocations.primitives",
        "documentation": {}
    },
    {
        "label": "ImageCollectionOutput",
        "importPath": "invokeai.app.invocations.primitives",
        "description": "invokeai.app.invocations.primitives",
        "isExtraImport": true,
        "detail": "invokeai.app.invocations.primitives",
        "documentation": {}
    },
    {
        "label": "ImageField",
        "importPath": "invokeai.app.invocations.primitives",
        "description": "invokeai.app.invocations.primitives",
        "isExtraImport": true,
        "detail": "invokeai.app.invocations.primitives",
        "documentation": {}
    },
    {
        "label": "ImageCollectionOutput",
        "importPath": "invokeai.app.invocations.primitives",
        "description": "invokeai.app.invocations.primitives",
        "isExtraImport": true,
        "detail": "invokeai.app.invocations.primitives",
        "documentation": {}
    },
    {
        "label": "ImageField",
        "importPath": "invokeai.app.invocations.primitives",
        "description": "invokeai.app.invocations.primitives",
        "isExtraImport": true,
        "detail": "invokeai.app.invocations.primitives",
        "documentation": {}
    },
    {
        "label": "ImageCollectionOutput",
        "importPath": "invokeai.app.invocations.primitives",
        "description": "invokeai.app.invocations.primitives",
        "isExtraImport": true,
        "detail": "invokeai.app.invocations.primitives",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageEnhance",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "zipfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zipfile",
        "description": "zipfile",
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "exifread",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "exifread",
        "description": "exifread",
        "detail": "exifread",
        "documentation": {}
    },
    {
        "label": "ExposureTimesInvocation",
        "kind": 6,
        "importPath": "exposuretimesnode",
        "description": "exposuretimesnode",
        "peekOfCode": "class ExposureTimesInvocation(BaseInvocation):\n    image_metadata: list[dict] = InputField(description=\"Metadata for each image\", default=[])\n    default_exposure_time: float = InputField(description=\"Default exposure time if not found in metadata\", default=1/60)\n    input_images: list[ImageField] = InputField(description=\"Input images for HDR processing\")\n    exposure_times: list[float] = OutputField(description=\"Calculated exposure times for HDR image processing.\")\n    result_message: str = OutputField(description=\"Result message\")\n    def calculate_exposure_time(self, metadata):\n        exposure_time = metadata.get('EXIF ExposureTime')\n        if exposure_time:\n            return float(exposure_time)",
        "detail": "exposuretimesnode",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "exposuretimesnode",
        "description": "exposuretimesnode",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@invocation(\"Exposure_Times\", title=\"Exposure Times for HDR\", tags=[\"hdr\", \"exposure\"], category=\"image\", version=\"1.0.0\", use_cache=False)\nclass ExposureTimesInvocation(BaseInvocation):\n    image_metadata: list[dict] = InputField(description=\"Metadata for each image\", default=[])\n    default_exposure_time: float = InputField(description=\"Default exposure time if not found in metadata\", default=1/60)\n    input_images: list[ImageField] = InputField(description=\"Input images for HDR processing\")\n    exposure_times: list[float] = OutputField(description=\"Calculated exposure times for HDR image processing.\")\n    result_message: str = OutputField(description=\"Result message\")\n    def calculate_exposure_time(self, metadata):\n        exposure_time = metadata.get('EXIF ExposureTime')",
        "detail": "exposuretimesnode",
        "documentation": {}
    },
    {
        "label": "UnifiedHDRProcessingInvocation",
        "kind": 6,
        "importPath": "hdr_processing",
        "description": "hdr_processing",
        "peekOfCode": "class UnifiedHDRProcessingInvocation(BaseInvocation):\n    # ... [Class Fields]\n    def create_pseudo_exposure_stack(self, base_image, factors):\n        # ... [Function Body]\n     def invoke(self, context: InvocationContext) -> ImageCollectionOutput:\n        logger.info(\"Unified HDR Processing node invoked\")\n        try:\n            output_images = []\n            if len(self.input_images) > 1 and self.exposure_times:\n                # True HDR Processing with multiple images",
        "detail": "hdr_processing",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "hdr_processing",
        "description": "hdr_processing",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@invocation(\"Unified_HDR_Processing\", title=\"Unified HDR Processing\", tags=[\"image\", \"hdr\", \"ai\"], category=\"image\", version=\"1.0.0\", use_cache=False)\nclass UnifiedHDRProcessingInvocation(BaseInvocation):\n    # ... [Class Fields]\n    def create_pseudo_exposure_stack(self, base_image, factors):\n        # ... [Function Body]\n     def invoke(self, context: InvocationContext) -> ImageCollectionOutput:\n        logger.info(\"Unified HDR Processing node invoked\")\n        try:\n            output_images = []",
        "detail": "hdr_processing",
        "documentation": {}
    },
    {
        "label": "RetrieveImagesFromFileInvocation",
        "kind": 6,
        "importPath": "retrieveimagesfromfile",
        "description": "retrieveimagesfromfile",
        "peekOfCode": "class RetrieveImagesFromFileInvocation(BaseInvocation):\n    input_path: str = InputField(description=\"Path to the file or directory containing images\")\n    save_to_zip: bool = InputField(description=\"Save all retrieved images to a ZIP file.\", default=False)\n    zip_save_path: str = InputField(description=\"Custom path to save the ZIP file.\", default=\"\")\n    def invoke(self, context: InvocationContext) -> ImageCollectionOutput:\n        logger.info(f\"Invoked RetrieveImagesFromFile with path: {self.input_path}\")\n        selected_images = self.get_images_from_path(self.input_path)\n        processed_images = []\n        metadata_collection = []\n        for image_path in selected_images:",
        "detail": "retrieveimagesfromfile",
        "documentation": {}
    },
    {
        "label": "extract_metadata",
        "kind": 2,
        "importPath": "retrieveimagesfromfile",
        "description": "retrieveimagesfromfile",
        "peekOfCode": "def extract_metadata(image_path):\n    \"\"\"\n    Extracts metadata from an image file using exifread.\n    \"\"\"\n    try:\n        with open(image_path, 'rb') as img_file:\n            tags = exifread.process_file(img_file)\n            return {tag: str(tags[tag]) for tag in tags if tag not in ['JPEGThumbnail', 'TIFFThumbnail', 'Filename', 'EXIF MakerNote']}\n    except Exception as e:\n        logger.error(f\"Error extracting metadata from {image_path}: {e}\")",
        "detail": "retrieveimagesfromfile",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "retrieveimagesfromfile",
        "description": "retrieveimagesfromfile",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef extract_metadata(image_path):\n    \"\"\"\n    Extracts metadata from an image file using exifread.\n    \"\"\"\n    try:\n        with open(image_path, 'rb') as img_file:\n            tags = exifread.process_file(img_file)\n            return {tag: str(tags[tag]) for tag in tags if tag not in ['JPEGThumbnail', 'TIFFThumbnail', 'Filename', 'EXIF MakerNote']}\n    except Exception as e:",
        "detail": "retrieveimagesfromfile",
        "documentation": {}
    },
    {
        "label": "UserInputinvocation",
        "kind": 6,
        "importPath": "UserInputNode",
        "description": "UserInputNode",
        "peekOfCode": "class UserInputinvocation(BaseInvocation):\n    \"\"\"\n    Custom node for user input in HDR image processing. This node allows users to input a custom exposure time.\n    \"\"\"\n    custom_exposure_time: float = InputField(description=\"Custom exposure time entered by the user.\", default=1/60)\n    def invoke(self, context: InvocationContext) -> dict:\n        \"\"\"\n        Invokes the User Input Node and validates the user's input.\n        Args:\n            context (InvocationContext): The context in which the node is invoked.",
        "detail": "UserInputNode",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "UserInputNode",
        "description": "UserInputNode",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@invocation(\"User_Input_Node\", title=\"User Input for HDR\", tags=[\"hdr\", \"input\"], category=\"input\", version=\"1.0.0\", use_cache=False)\nclass UserInputinvocation(BaseInvocation):\n    \"\"\"\n    Custom node for user input in HDR image processing. This node allows users to input a custom exposure time.\n    \"\"\"\n    custom_exposure_time: float = InputField(description=\"Custom exposure time entered by the user.\", default=1/60)\n    def invoke(self, context: InvocationContext) -> dict:\n        \"\"\"\n        Invokes the User Input Node and validates the user's input.",
        "detail": "UserInputNode",
        "documentation": {}
    }
]